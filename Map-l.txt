<template>
	<div class="vue-map-container">
		<v-map ref="map" :zoom="zoom" :center="center">
			<v-tilelayer url="http://{s}.tile.osm.org/{z}/{x}/{y}.png"></v-tilelayer>
			<v-marker-cluster>
				<v-marker
					v-for="(marker, index) in markers"
					:key="index"
					:lat-lng="makeCoords(marker.location.lat, marker.location.lng)"
					:l-click="showSpot(marker._id, marker.slug, marker.location.lat, marker.location.lng)">
				</v-marker>
			</v-marker-cluster>
		</v-map>
	</div>
</template>

<script>
import Vue2Leaflet from 'vue2-leaflet'

export default {
	name: 'Map',
	data () {
		return {
			center: [42.6991088, 2.8694822],
			zoom: 5
		}
	},

	components: {
		'v-map': Vue2Leaflet.Map,
		'v-marker': Vue2Leaflet.Marker,
		'v-tileLayer': Vue2Leaflet.TileLayer
	},

	computed: {
		markers () { return this.$store.state.map.markers }
	},

	created () {
		this.setCenterMap()
		this.storeMap()
	},

	methods: {
		/**
		 * Define the center position of the map if geolocation is available or not
		 */
		setCenterMap () {
			let that = this

			function success (position) {
				that.center = that.makeCoords(position.coords.latitude, position.coords.longitude)
				that.zoom = 14
			}

			function error (error) {
				console.log(`Error ${error.code}: ${error.message}`)
			}

			if (process.browser && 'geolocation' in navigator) {
				navigator.geolocation.getCurrentPosition(success, error)
			}
			else {
				this.center = [0, 0]
			}
		},

		/**
		 * Format valid coords for Google Maps
		 */
		makeCoords (lat, lng) {
			return [parseFloat(lat), parseFloat(lng)]
		},

		/**
		 * Open the page linked to a marker
		 */
		showSpot (id, slug, lat, lng) {
			// this.center = this.makeCoords(lat, lng)
			this.$router.push('/spot/' + slug)
		},

		storeMap () {
			setTimeout(() => {
				this.$store.commit('map/getMap', this.$refs.map)
			}, 8000)
		}
	}
}
</script>

<style lang="stylus">
@require '~assets/styles/variables.styl'
@require '~assets/styles/mixins.styl'

.vue-map-container
	flex 1
	width 100vw
</style>
